Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 10

Resources:
  ShowSequenceApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api.showsequence
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        ShowSequenceGetEvent:
          Type: Api
          Properties:
            Path: "/showsequence/{sequence}"
            Method: get
            RestApiId: !Ref Api
  OffApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: "api.off"
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        OffGetEvent:
          Type: Api
          Properties:
            Path: "/off"
            Method: get
            RestApiId: !Ref Api
  StateApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api.state
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        StateGetEvent:
          Type: Api
          Properties:
            Path: "/state"
            Method: get
            RestApiId: !Ref Api
            
  CustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: "{{resolve:ssm:URL_API:1}}"
      EndpointConfiguration: 
        Types:
        - REGIONAL
      RegionalCertificateArn: "{{resolve:ssm:CERT_API_ARN:1}}"

  ApiDomainMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref Api
      Stage: prod
      BasePath: lights
    DependsOn: ApiprodStage
      
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: LightsApiProd
      StageName: prod
      EndpointConfiguration: REGIONAL
      MethodSettings: [{
        "ThrottlingBurstLimit": 10,
        "ThrottlingRateLimit": 5,
        "ResourcePath": "/*",
        "HttpMethod": "*",
      }]
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'https://lights.debsanddarren.com'" # TODO reference environment variable for this
      Auth:
        DefaultAuthorizer: AWS_IAM

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'LambdaExec-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: "iotshadowoperations"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                - "iot:GetThingShadow"
                - "iot:UpdateThingShadow"
                Resource: "arn:aws:iot:*:*:thing/*"
